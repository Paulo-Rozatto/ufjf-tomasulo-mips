{"mappings":"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","sources":["src/index.js","src/cpu.js","src/stages/issue.js","src/stages/execute.js","src/stages/writeback.js"],"sourcesContent":["import { setInstructions, issue, execute, writeBack, clearActive, init } from \"./interface-handlers.js\";\nimport { assemblyToBin } from \"./translator.js\";\nimport * as cpu from \"./cpu.js\";\n\nconst menu = document.querySelector(\".menu\");\nconst menuBtn = document.querySelector(\".menu-button\")\n\nconst textInput = document.querySelector(\"#codeTextInput\");\nconst fileInput = document.querySelector(\"#codeFileInput\");\nconst textOutput = document.querySelector(\"#codeTextOutput\");\nconst sideOutput = document.querySelector(\"#output\");\n\nconst upModal = document.querySelector(\"#uploadModal\");\nconst saveButton = document.querySelector(\"#saveButton\");\n\nconst downModal = document.querySelector(\"#downloadModal\");\nconst downloadButton = document.querySelector(\"#downloadButton\");\n\nconst reset = document.querySelector(\"#reset\");\nconst run = document.querySelector(\"#run\");\nconst pause = document.querySelector(\"#pause\");\nconst foward = document.querySelector(\"#foward\");\n\nconst INTERVAL_TIME = 1500; // ms\nlet interval;\n\nlet code = `fld $1, 16($12)\nfsd $1, 8($0)\nfmul $6, $1, $5\nfdiv $7, $5, $1\nfadd $2, $1, $5\nfsub $3, $2, $5\nfadd $4, $3, $5\nfadd $5, $4, $5`;\n\n// cpu setup\ncpu.setUICallbacks({ issue, execute, writeBack });\n\nfoward.onclick = () => {\n    clearActive();\n    cpu.step();\n}\n\nreset.onclick = () => {\n    init();\n    clearActive();\n    cpu.reset();\n}\n\nrun.onclick = () => {\n    clearActive();\n    cpu.step();\n    interval = setInterval(() => {\n        clearActive();\n        cpu.step();\n    }, INTERVAL_TIME);\n}\n\npause.onclick = () => {\n    clearInterval(interval);\n}\n\n// handle menu visibility\nmenuBtn.onclick = () => {\n    menu.classList.toggle(\"menu-visible\");\n    menu.classList.toggle(\"menu-hidden\");\n}\n\nfileInput.onchange = () => { // read file and put it in the text input\n    const file = fileInput.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n        const result = event.target.result;\n        textInput.innerHTML = result;\n    }\n\n    reader.readAsText(file);\n}\n\nsaveButton.onclick = () => { // save code from text input\n    code = textInput.value.toString().trim();\n    if (/[a-z]/.test(code)) { // if code is not binary\n        code = code.split(\"\\n\").map(e => assemblyToBin(e))\n    } else {\n        code = code.split(\"\\n\");\n    }\n\n    setInstructions(code)\n    cpu.setInstructions(code)\n}\n\nupModal.addEventListener(\"show.bs.modal\", () => { // clear input when modal is opened\n    fileInput.value = \"\";\n    textInput.value = typeof code === \"string\" ? code : code.join(\"\\n\");\n})\n\n// handle output\ndownModal.addEventListener(\"show.bs.modal\", () => textOutput.value = sideOutput.value) // put code in output when modal is opened\n\ndownloadButton.onclick = (event) => {\n    let blob = new Blob([textOutput.value], { type: 'text/plain' });\n    event.target.download = \"resultado.txt\";\n    event.target.href = window.URL.createObjectURL(blob);\n}","import { instructions, operations, stations, adder, multiplier, loadStoreQueue, cdb, pc, clock, resetStations } from './components.js'\nimport { issue } from './stages/issue.js'\nimport { execute } from './stages/execute.js';\nimport { writeBack } from './stages/writeback.js';\nimport { updateMemory, updateOutput, updateRegisters } from './interface-handlers.js';\n\nconst memory = new ArrayBuffer(512); // memory size in bytes\nconst memView = new Float64Array(memory); // view memory as 64-bit floats as we are working only with doubles\n\nconst registers = new Float64Array(32); // 16 registers, each one 64-bit float\nconst regStats = new Uint8Array(32); // 16 registers, each one 8-bit unsigned integer\n\nlet commands = [];\n\nlet ui = {\n    issue: () => { },\n    execute: () => { },\n    writeBack: () => { },\n}\n\nissue.init(instructions, operations, stations, regStats, registers, loadStoreQueue, pc, clock);\nexecute.init(adder, multiplier, stations, registers, loadStoreQueue, memView, cdb);\nwriteBack.init(stations, registers, regStats, memView, loadStoreQueue, cdb);\n\nexport function setInstructions(_commands) {\n    commands = _commands;\n    const binaryInstructions = _commands.map(command => parseInt(command, 2));\n    instructions.set(binaryInstructions);\n}\n\nexport function setUICallbacks(callbacks) {\n    ui = { ...ui, ...callbacks };\n}\n\nexport function step() {\n    let outPC = pc.get();\n    let outClock = clock.get();\n\n    issue.read();\n    execute.read();\n    writeBack.read();\n\n    issue.write(ui.issue);\n    execute.write(ui.execute);\n    writeBack.write(ui.writeBack);\n\n    updateOutput(outPC, outClock, instructions.get(outPC), stations, registers, memView);\n}\n\nexport function reset() {\n    pc.reset();\n    clock.reset();\n    setInstructions(commands);\n    loadStoreQueue.reset();\n\n    memView[2] = 2;\n    updateMemory(2, 2);\n\n    registers[1] = 1.1;\n    registers[5] = 5.5;\n    updateRegisters([{ id: 1, value: 1.1 }, { id: 5, value: 5 }]);\n\n    resetStations();\n}\n\nmemView[2] = 2;\nupdateMemory(2, 2);\n\nregisters[1] = 1.1;\nregisters[5] = 5.5;\nupdateRegisters([{ id: 1, value: 1.1 }, { id: 5, value: 5 }]);\n","import { TYPES } from \"../components\";\n\nlet instructions, operations, stations, regStats, registers, pc, clock, loadStoreQueue;\n\nfunction init(_instructions, _operations, _stations, _regStats, _registers, _loadStoreQueue, _pc, _clock) {\n    instructions = _instructions;\n    operations = _operations;\n    stations = _stations;\n    regStats = _regStats;\n    registers = _registers;\n    loadStoreQueue = _loadStoreQueue;\n    pc = _pc;\n    clock = _clock;\n}\n\nlet instruction, opcode, funct, operation, station, params;\n\nfunction read() {\n    instruction = instructions.get(pc.get());\n    opcode = instruction & 0b1111111; // [6-0]\n    funct = (instruction >> 12) & 0b111 // [14-12]\n\n    operation = operations[opcode];\n\n    if (!operation) {\n        console.warn('operation not found')\n        return;\n    }\n\n    if (opcode == TYPES.R) {\n        operation = operation[funct];\n    }\n\n    station = stations[operation.station].find(station => !station.busy);\n    params = operations[opcode].getParams(instruction);\n}\n\nfunction write(uiCall) {\n    clock.next();\n    uiCall(null, null, clock);\n\n    if (!operation) {\n        return;\n    }\n    if (!station) {\n        console.warn('stall')\n        return;\n    }\n\n    if (opcode == TYPES.R) {\n        writeR();\n    } else {\n        writeIS();\n    }\n\n    pc.next();\n    uiCall(station, pc, clock);\n}\n\nfunction writeR() {\n    if (!station) {\n        console.warn('stall')\n        return;\n    }\n\n    const { rs1, rs2, rd } = params;\n\n    if (regStats[rs1] != 0) {\n        station.qj = regStats[rs1];\n    } else {\n        station.vj = registers[rs1]\n        station.qj = 0;\n    }\n\n    if (regStats[rs2] != 0) {\n        station.qk = regStats[rs2];\n    } else {\n        station.vk = registers[rs2];\n        station.qk = 0;\n    }\n    station.busy = true;\n    station.op = operation.op;\n    station.opName = operation.name;\n    station.cicles = operation.cicles;\n    regStats[rd] = station.id;\n}\n\nfunction writeIS() {\n    if (!station) {\n        console.warn('stall')\n        return;\n    }\n\n    const { rs1, rs2, rd, imm } = params;\n    let rs, r;\n\n    if (opcode == TYPES.I) {\n        rs = rs1;\n        r = rd;\n    } else {\n        rs = rs2;\n        r = rs1;\n    }\n\n    if (regStats[rs] != 0) {\n        station.qj = regStats[rs];\n    } else {\n        station.vj = registers[rs]\n        station.qj = 0;\n    }\n    regStats[r] = station.id;\n    station.busy = true;\n    station.op = operation.op;\n    station.opName = operation.name;\n    station.cicles = operation.cicles;\n    station.vk = imm;\n    loadStoreQueue.push(station);\n}\n\nexport const issue = {\n    init,\n    read,\n    write,\n}","import { ADD_RS, MUL_RS } from \"../components\";\n\nlet adder, multiplier, stations, registers, memory, cdb, loadStoreQueue;\n\nfunction init(_adder, _multiplier, _stations, _registers, _loadStoreQueue, _memory, _cdb) {\n    adder = _adder;\n    multiplier = _multiplier;\n    stations = _stations;\n    registers = _registers;\n    loadStoreQueue = _loadStoreQueue;\n    memory = _memory;\n    cdb = _cdb;\n}\n\nlet adderStation, multiplierStation, buffer;\nfunction read() {\n    adderStation = stations[ADD_RS].find(station => station.busy && station.qj == 0 && station.qk == 0);\n    multiplierStation = stations[MUL_RS].find(station => station.busy && station.qj == 0 && station.qk == 0);\n    const head = loadStoreQueue.head();\n    buffer = head.busy && head.qj == 0 && head.qk == 0 ? head : null;\n}\n\nlet adderUi, multiplierUi, stationUi; // referefences to adder and station if they are to be updated in the ui\nfunction write(uiCall) {\n    adderUi = null;\n    multiplierUi = null;\n    stationUi = null;\n\n    if (adder.busy) {\n        if (!adder.ready) {\n            adder.station.cicles--;\n            adderUi = adder;\n\n            if (adder.station.cicles == 0) {\n                adder.ready = true;\n                adder.result = adder.station.op(adder.station.vj, adder.station.vk);\n            }\n        }\n\n        if (adder.ready && cdb.busy == false) {\n            cdb.busy = true;\n            cdb.result = adder.result;\n            cdb.station = adder.station;\n            adder.busy = false;\n            adder.ready = false;\n            adder.station.busy = false;\n        }\n    } else if (adderStation) {\n        adder.busy = true;\n        adder.ready = false;\n        adder.station = adderStation;\n        adderUi = adder;\n    }\n\n    if (multiplier.busy) {\n        if (!multiplier.ready) {\n            multiplier.station.cicles--;\n            multiplierUi = multiplier;\n\n            if (multiplier.station.cicles == 0) {\n                multiplier.ready = true;\n                multiplier.result = multiplier.station.op(multiplier.station.vj, multiplier.station.vk);\n            }\n        }\n\n        if (multiplier.ready && cdb.busy == false) {\n            cdb.busy = true;\n            cdb.result = multiplier.result;\n            cdb.station = multiplier.station;\n            multiplier.busy = false;\n            multiplier.ready = false;\n            multiplier.station.busy = false;\n        }\n    } else if (multiplierStation) {\n        multiplier.busy = true;\n        multiplier.ready = false;\n        multiplier.station = multiplierStation;\n        multiplierUi = multiplier;\n    }\n\n    if (buffer) {\n        if (!buffer.ready) {\n            buffer.cicles--;\n            if (buffer.cicles === 0) {\n                buffer.ready = true;\n                buffer.vk = buffer.op(buffer.vj, buffer.vk, registers, memory);\n            }\n        }\n\n        if (buffer.opName === 'fld') {\n            if (buffer.ready && cdb.busy == false) {\n                cdb.busy = true;\n                cdb.result = buffer.vk;\n                cdb.station = buffer;\n                buffer.busy = false;\n                buffer.ready = false;\n                stationUi = buffer;\n                loadStoreQueue.pop();\n            }\n        } else if (buffer.ready) {\n            stationUi = buffer;\n        }\n    }\n\n    uiCall(adderUi, multiplierUi, stationUi);\n}\n\nexport const execute = {\n    init,\n    read,\n    write,\n}","import { updateMemory } from \"../interface-handlers\";\n\nlet stations, registers, regStats, memory, loadStoreQueue, cdb;\n\nfunction init(_stations, _registers, _regStats, _memory, _loadStoreQueue, _cdb) {\n    stations = _stations;\n    registers = _registers;\n    regStats = _regStats;\n    memory = _memory;\n    loadStoreQueue = _loadStoreQueue;\n    cdb = _cdb;\n}\n\nlet station, result, busy, stats, head;\nfunction read() {\n    busy = cdb.busy;\n    result = cdb.result;\n    station = { ...cdb.station }; // copy object\n    stats = [...regStats];\n    head = {...loadStoreQueue.head()};\n}\n\nfunction write(uiCall) {\n    const uiStations = new Set();\n    const uiRegisters = new Set();\n\n    if (busy) {\n        stats.forEach((stat, i) => {\n            if (stat == station.id) {\n                registers[i] = result;\n                regStats[i] = 0;\n                uiRegisters.add({ id: i, value: result });\n            }\n        })\n\n        const allStations = Object.values(stations).flatMap(e => e);\n        allStations.forEach(rs => {\n            if (rs.qj == station.id) {\n                rs.qj = 0;\n                rs.vj = result;\n                uiStations.add(rs);\n            }\n            if (rs.qk == station.id) {\n                rs.qk = 0;\n                rs.vk = result;\n                uiStations.add(rs);\n            }\n        });\n\n        cdb.result = 0;\n        cdb.station = null;\n        cdb.busy = false;\n        uiStations.add(station);\n    }\n\n    if (head && head.ready && head.opName === 'fsd') {\n        const address = head.vk >> 3; // memview has 8 bytes per line\n        memory[address] = head.vj;\n        head.busy = false;\n        head.ready = false;\n        loadStoreQueue.pop();\n        uiStations.add(head);\n        updateMemory(address, head.vj);\n    }\n\n    uiCall(uiStations, uiRegisters);\n}\n\nexport const writeBack = {\n    init,\n    read,\n    write,\n}"],"names":["$791ri","parcelRequire","$2FxLf","$9a135f3192ceb6fe$var$instructions","$9a135f3192ceb6fe$var$operations","$9a135f3192ceb6fe$var$stations","$9a135f3192ceb6fe$var$regStats","$9a135f3192ceb6fe$var$registers","$9a135f3192ceb6fe$var$pc","$9a135f3192ceb6fe$var$clock","$9a135f3192ceb6fe$var$loadStoreQueue","$9a135f3192ceb6fe$var$instruction","$9a135f3192ceb6fe$var$opcode","$9a135f3192ceb6fe$var$funct","$9a135f3192ceb6fe$var$operation","$9a135f3192ceb6fe$var$station","$9a135f3192ceb6fe$var$params","$9a135f3192ceb6fe$export$69ad3503f98be476","_instructions","_operations","_stations","_regStats","_registers","_loadStoreQueue","_pc","_clock","get","TYPES","R","station","find","busy","getParams","console","warn","uiCall","next","rs1","rs2","rd","qj","vj","qk","vk","op","opName","name","cicles","id","$9a135f3192ceb6fe$var$writeR","imm","rs","r","I","push","$9a135f3192ceb6fe$var$writeIS","$24d536f779900a39$var$adder","$24d536f779900a39$var$multiplier","$24d536f779900a39$var$stations","$24d536f779900a39$var$registers","$24d536f779900a39$var$memory","$24d536f779900a39$var$cdb","$24d536f779900a39$var$loadStoreQueue","$24d536f779900a39$var$adderStation","$24d536f779900a39$var$multiplierStation","$24d536f779900a39$var$buffer","$24d536f779900a39$var$adderUi","$24d536f779900a39$var$multiplierUi","$24d536f779900a39$var$stationUi","$24d536f779900a39$export$51396ec711da548b","_adder","_multiplier","_memory","_cdb","ADD_RS","MUL_RS","head","ready","result","pop","$08393893935bdc23$var$stations","$08393893935bdc23$var$registers","$08393893935bdc23$var$regStats","$08393893935bdc23$var$memory","$08393893935bdc23$var$loadStoreQueue","$08393893935bdc23$var$cdb","$08393893935bdc23$var$station","$08393893935bdc23$var$result","$08393893935bdc23$var$busy","$08393893935bdc23$var$stats","$08393893935bdc23$var$head","$08393893935bdc23$export$166c2f9918d31b3a","uiStations","Set","uiRegisters","forEach","stat","i","add","value","Object","values","flatMap","e","address","updateMemory","$475d8d40410239af$var$memory","ArrayBuffer","$475d8d40410239af$var$memView","Float64Array","$475d8d40410239af$var$registers","$475d8d40410239af$var$regStats","Uint8Array","$475d8d40410239af$var$commands","$475d8d40410239af$var$ui","issue","execute","writeBack","$475d8d40410239af$export$685c27954c6f3b2f","_commands","binaryInstructions","map","command","parseInt","instructions","set","$475d8d40410239af$export$35d34bc0ed591a92","outPC","pc","outClock","clock","read","write","updateOutput","stations","init","operations","loadStoreQueue","adder","multiplier","cdb","updateRegisters","$35da740d59af89ba$var$menu","document","querySelector","$35da740d59af89ba$var$menuBtn","$35da740d59af89ba$var$textInput","$35da740d59af89ba$var$fileInput","$35da740d59af89ba$var$textOutput","$35da740d59af89ba$var$sideOutput","$35da740d59af89ba$var$upModal","$35da740d59af89ba$var$saveButton","$35da740d59af89ba$var$downModal","$35da740d59af89ba$var$downloadButton","$35da740d59af89ba$var$reset","$35da740d59af89ba$var$run","$35da740d59af89ba$var$pause","$35da740d59af89ba$var$foward","$35da740d59af89ba$var$interval","$35da740d59af89ba$var$code","callbacks","onclick","clearActive","reset","resetStations","setInterval","clearInterval","classList","toggle","onchange","file","files","reader","FileReader","onload","event","target","innerHTML","readAsText","toString","trim","test","split","$5jcMS","assemblyToBin","setInstructions","addEventListener","join","blob","Blob","type","download","href","window","URL","createObjectURL"],"version":3,"file":"index.783db9e3.js.map"}